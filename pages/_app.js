import "@fancyapps/ui/dist/fancybox.css";
import 'flickr-justified-gallery/src/fjGallery.css';
import 'swiper/css';
import 'swiper/css/parallax';
import 'swiper/css/pagination';
import "splitting/dist/splitting.css";
import "splitting/dist/splitting-cells.css";
import '../styles/style.scss';
import { appWithTranslation } from 'next-i18next';
import LanguageSwitcher from "../components/language/LanguageSwitcher";
import { Back, gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/dist/ScrollToPlugin';
import Head from "next/head";
import React, { useEffect, useState } from "react";
import dsnEffect, { moveSection, fade, textAnimation } from "../animation/dsnEffect";
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react'; // Redux Persist için gerekli
import { store, persistor } from "../features/store"; // persistor'ı import ediyoruz
import EremiaMenu from "../components/header/menu/EremiaMenu";
import PageLogo from "../components/header/pageLogo/pageLogo";
import { I18nextProvider } from 'react-i18next';
import i18n from '../language/i18n'; // Adjust the path based on your project structure
import OptionTheme from "../components/option-theme/OptionTheme";
import RightScrollTop from "../components/option-theme/RightScrollTop";
import { checkMobile, parallaxIt } from "../hooks/helper";
import LoadingPage from "../layout/LoadingPage";
import { tdEnd } from "../hooks/transition/transitionDefalut";
import CustomCursor from "../layout/CustomCursor";

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

dsnEffect.registerEffect(moveSection, fade, textAnimation);

gsap.config({
    nullTargetWarn: false
});
gsap.defaults({
    duration: 1,
    overwrite: "auto",
});

function MyApp({ Component, pageProps }) {

    const [creativeLine, setCreativeLine] = useState(true);
    const [colorPage, setColorPage] = useState("v-dark");

    useEffect(() => {
        dsnEffect.registerEffect(tdEnd);
    }, []);

    useEffect(() => {
        const scrollDiv = document.createElement("div");
        scrollDiv.style.cssText = "width:100px;height:100px;overflow: scroll;position: absolute;top: -9999px;";
        document.body.appendChild(scrollDiv);
        document.body.style.setProperty('--dsn-width-scroll', scrollDiv.offsetWidth - scrollDiv.clientWidth + "px");
        document.body.removeChild(scrollDiv);
    }, []);

    useEffect(() => {
        if (creativeLine) {
            document.body.classList.add("dsn-line-style");
        } else {
            document.body.classList.remove("dsn-line-style");
        }
    }, [creativeLine]);

    useEffect(() => {
        if (checkMobile(true)) return;

        const options = {
            speed: 0.5,
            move: 20
        };

        const parallaxHover = document.body.querySelectorAll("[data-dsn=\"parallax\"]");

        parallaxHover.forEach(item => {
            const icon = document.createElement("div");
            icon.classList.add('icon-circle');
            icon.style.minWidth = "1px";
            item.appendChild(icon);

            item.removeAttribute('data-dsn');
            item.classList.add('dsn-parallax-hover');
            const scale = item.classList.contains("image-zoom");
            const moveIcon = item.classList.contains("move-circle");

            const mouseEnter = function () {
                if (scale) gsap.to([item, icon], .3, { scale: 1.03 });
            }

            const mouseLeave = function () {
                gsap.to([item, icon], 1, { x: 0, y: 0, scale: 1, ease: Back.easeOut.config(4) });
            }

            const mouseMove = function (e) {
                parallaxIt(e, item, options);
                if (moveIcon) parallaxIt(e, icon, { ...options, move: options.move * 2 });
            }

            item.addEventListener('mouseenter', mouseEnter);
            item.addEventListener('mouseleave', mouseLeave);
            item.addEventListener('mousemove', mouseMove);
        });
    }, []);

    return (
        <>
            <Head>
                <title>3BÖLÜ2</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/img/ucboluikilogo.png" />
                <link rel="apple-touch-icon" href="/img/ucboluikilogo.png" />
            </Head>
            <Provider store={store}>
                {/* Redux PersistGate ile uygulamanın yüklenmesini bekliyoruz */}
                <PersistGate loading={null} persistor={persistor}>
                <I18nextProvider i18n={i18n}>
                    <div id="__dsn_content" className={colorPage}>
                        <EremiaMenu hamburger />
                        <Component {...pageProps} />
                        <OptionTheme lineTheme={[creativeLine, setCreativeLine]} pageColor={[colorPage, setColorPage]} />
                        <RightScrollTop options={{ duration: 1.5, ease: "power4.inOut" }} />
                        <CustomCursor
                            duration={0.5}
                            durationChangeSize={0.3}
                            size={30}
                            scale={75}
                            ease="power2.out"
                        />
                    </div>
                    </I18nextProvider>
                </PersistGate>
            </Provider>
        </>
    );
}

export default appWithTranslation(MyApp);
